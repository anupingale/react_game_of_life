{"version":3,"sources":["gameOfLife.js","index.js","util.js"],"names":["Game","createAdjacentNumber","number","isAlive","currentGeneration","cell","some","element","validateNeighbour","neighbour","_this$bound","this","bound","topLeft","bottomRight","verifyRow","verifyCol","extractNeighbours","result","position","JSON","parse","adjacentRow","adjacentCol","allNeighbours","reduce","zipper","splice","filter","bind","initWorld","_this$bound2","rowCoordinates","coordinateGenerator","colCoordinates","countAliveNeighbours","neighbourCount","neighbours","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","verifyRules","nextGeneration","keys","Object","countAlive","verify","map","x","GameOfLife","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","lastGeneration","game","createTable","assertThisInitialized","state","updateCells","index","index1","combination","push","isSubset","react_default","a","createElement","onClick","makeCellLive","id","key","className","table","tableRow","createAndUpdateCell","_this2","setInterval","setState","React","Component","ReactDom","render","src_GameOfLife","document","getElementById","module","exports","column","row","startingIndex","endingIndex","indexex"],"mappings":"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","file":"static/js/main.771cb827.chunk.js","sourcesContent":["import { zipper, coordinateGenerator } from \"./util.js\";\n\nclass Game {\n  createAdjacentNumber = function(number) {\n    return [number - 1, number, number + 1];\n  };\n\n  isAlive = function(currentGeneration, cell) {\n    return currentGeneration.some(\n      element => element[0] === cell[0] && element[1] === cell[1]\n    );\n  };\n\n  validateNeighbour = function() {\n    return function(neighbour) {\n      let { topLeft, bottomRight } = this.bound;\n      let verifyRow =\n        topLeft[0] <= neighbour[0] && neighbour[0] <= bottomRight[0];\n      let verifyCol =\n        neighbour[1] >= topLeft[1] && neighbour[1] <= bottomRight[1];\n      return verifyRow && verifyCol;\n    };\n  };\n\n  extractNeighbours = function(result, cell) {\n    let position = JSON.parse(cell);\n    let adjacentRow = this.createAdjacentNumber(position[0]);\n    let adjacentCol = this.createAdjacentNumber(position[1]);\n    let allNeighbours = adjacentRow.reduce(zipper(adjacentCol), []);\n    allNeighbours.splice(4, 1);\n    result[cell] = allNeighbours.filter(this.validateNeighbour.bind(this));\n    return result;\n  };\n\n  initWorld = function() {\n    let { topLeft, bottomRight } = this.bound;\n    let rowCoordinates = coordinateGenerator(topLeft[0], bottomRight[0]);\n    let colCoordinates = coordinateGenerator(topLeft[1], bottomRight[1]);\n    let cells = rowCoordinates.reduce(zipper(colCoordinates), []);\n    return cells.reduce((result, cell) => {\n      result[\"[\" + cell + \"]\"] = \"D\";\n      return result;\n    }, {});\n  };\n\n  countAliveNeighbours = function(allNeighbours, currentGeneration) {\n    return function(result, cell) {\n      let neighbourCount = 0;\n      let neighbours = allNeighbours[cell];\n      for (let neighbour of neighbours) {\n        this.isAlive(currentGeneration, neighbour) && neighbourCount++;\n      }\n      result[cell] = neighbourCount;\n      return result;\n    };\n  };\n\n  verifyRules = function(neighbourCount, currentGeneration, cell) {\n    let element = JSON.parse(cell);\n    let alive =\n      neighbourCount[cell] === 2 && this.isAlive(currentGeneration, element);\n    return alive || neighbourCount[cell] === 3;\n  };\n\n  nextGeneration = function(currentGeneration, bound) {\n    this.bound = bound;\n    let keys = Object.keys(this.initWorld());\n    let neighbours = keys.reduce(this.extractNeighbours.bind(this), {});\n    let countAlive = this.countAliveNeighbours.bind(\n      this,\n      neighbours,\n      currentGeneration\n    )();\n    let neighbourCount = keys.reduce(countAlive.bind(this), {});\n    let verify = this.verifyRules.bind(this, neighbourCount, currentGeneration);\n    return keys.filter(verify).map(x => JSON.parse(x));\n  };\n}\n\nexport default Game;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport Game from \"./gameOfLife.js\";\nimport \"./index.css\";\n\nclass GameOfLife extends React.Component {\n  constructor(props) {\n    super(props);\n    this.lastGeneration = [[0, 0], [0, 1], [0, 2], [2, 2], [1, 1], [3, 3]];\n    this.bound = {\n      topLeft: [0, 0],\n      bottomRight: [10, 10]\n    };\n    this.game = props.game;\n    this.createTable = this.createTable.bind(this);\n    this.state = {\n      nextGeneration: this.game.nextGeneration(this.lastGeneration, this.bound),\n      lastGeneration: this.lastGeneration\n    };\n    this.updateCells = this.updateCells.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateCells();\n  }\n  render() {\n    return this.createTable();\n  }\n\n  isSubset(index, index1) {\n    return this.lastGeneration.some(combination => {\n      return combination[0] === index && combination[1] === index1;\n    });\n  }\n\n  makeCellLive(cell) {\n    this.lastGeneration.push(cell);\n  }\n  createAndUpdateCell(index, index1) {\n    if (this.isSubset(index, index1)) {\n      return (\n        <td\n          onClick={this.makeCellLive.bind(this, [index, index1])}\n          id={index + \" \" + index1}\n          key={index + \" \" + index1}\n          className=\"alive\"\n        />\n      );\n    }\n    return (\n      <td\n        onClick={this.makeCellLive.bind(this, [index, index1])}\n        id={index + \" \" + index1}\n        key={index + \" \" + index1}\n      />\n    );\n  }\n\n  createTable() {\n    const table = [];\n    const { topLeft, bottomRight } = this.bound;\n    for (let index = topLeft[0]; index < bottomRight[0]; index++) {\n      const tableRow = [];\n      for (let index1 = topLeft[1]; index1 < bottomRight[1]; index1++) {\n        tableRow.push(this.createAndUpdateCell(index, index1));\n      }\n      table.push(<tr key={index}>{tableRow}</tr>);\n    }\n    return (\n      <table>\n        <tbody>{table}</tbody>\n      </table>\n    );\n  }\n\n  updateCells() {\n    setInterval(() => {\n      this.createTable();\n      this.setState(state => ({\n        lastGeneration: this.lastGeneration,\n        nextGeneration: this.game.nextGeneration(\n          this.lastGeneration,\n          this.bound\n        )\n      }));\n      this.lastGeneration = this.game.nextGeneration(\n        this.lastGeneration,\n        this.bound\n      );\n    }, 1000);\n  }\n}\n\nconst game = new Game();\nReactDom.render(<GameOfLife game={game} />, document.getElementById(\"root\"));\n","const zipper = function(column) {\n  return function(result, row) {\n    for (let element of column) {\n      result.push([row, element]);\n    }\n    return result;\n  };\n};\n\nconst coordinateGenerator = function(startingIndex, endingIndex) {\n  let indexex = [];\n  for (let index = startingIndex; index <= endingIndex; index++) {\n    indexex.push(index);\n  }\n  return indexex;\n};\n\nmodule.exports = { zipper, coordinateGenerator };\n\n"],"sourceRoot":""}